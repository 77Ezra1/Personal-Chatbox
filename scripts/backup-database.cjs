#!/usr/bin/env node
/**
 * Êï∞ÊçÆÂ∫ìÂ§á‰ªΩËÑöÊú¨
 *
 * ÂäüËÉΩ: Â§á‰ªΩÂΩìÂâç SQLite Êï∞ÊçÆÂ∫ì
 * Áî®Ê≥ï: node scripts/backup-database.cjs
 * ÊàñËÄÖ: npm run db:backup
 */

const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function main() {
  log('\nüì¶ Êï∞ÊçÆÂ∫ìÂ§á‰ªΩÂ∑•ÂÖ∑', 'cyan');
  log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n', 'cyan');

  const dbPath = path.join(__dirname, '../data/app.db');
  const backupDir = path.join(__dirname, '../data/backups');

  // Á°Æ‰øùÂ§á‰ªΩÁõÆÂΩïÂ≠òÂú®
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
    log('‚úì ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï', 'green');
  }

  // Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
  if (!fs.existsSync(dbPath)) {
    log('‚ùå ÈîôËØØ: Êï∞ÊçÆÂ∫ìÊñá‰ª∂‰∏çÂ≠òÂú®', 'red');
    log(`   Ë∑ØÂæÑ: ${dbPath}`, 'red');
    process.exit(1);
  }

  // ÁîüÊàêÂ§á‰ªΩÊñá‰ª∂Âêç
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  const backupPath = path.join(backupDir, `app-${timestamp}.db`);

  try {
    // Â§çÂà∂Êï∞ÊçÆÂ∫ìÊñá‰ª∂
    fs.copyFileSync(dbPath, backupPath);

    const stats = fs.statSync(backupPath);
    const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);

    log('‚úÖ Â§á‰ªΩÊàêÂäü!', 'green');
    log(`\nüìÅ Â§á‰ªΩ‰ø°ÊÅØ:`, 'cyan');
    log(`   Êñá‰ª∂Âêç: app-${timestamp}.db`, 'reset');
    log(`   Ë∑ØÂæÑ: ${backupPath}`, 'reset');
    log(`   Â§ßÂ∞è: ${sizeInMB} MB`, 'reset');
    log(`   Êó∂Èó¥: ${new Date().toLocaleString('zh-CN')}`, 'reset');

    // ÂàóÂá∫ÊâÄÊúâÂ§á‰ªΩ
    const backups = fs.readdirSync(backupDir)
      .filter(f => f.endsWith('.db'))
      .sort()
      .reverse();

    if (backups.length > 1) {
      log(`\nüìã ÂéÜÂè≤Â§á‰ªΩ (ÊúÄËøë${Math.min(5, backups.length)}‰∏™):`, 'cyan');
      backups.slice(0, 5).forEach((backup, index) => {
        const backupStats = fs.statSync(path.join(backupDir, backup));
        const size = (backupStats.size / (1024 * 1024)).toFixed(2);
        const marker = index === 0 ? '‚Üí' : ' ';
        log(`  ${marker} ${backup} (${size} MB)`, index === 0 ? 'green' : 'reset');
      });
    }

    log('\nüí° ÊÅ¢Â§çÂ§á‰ªΩÂëΩ‰ª§:', 'cyan');
    log(`   npm run db:restore ${timestamp}`, 'yellow');
    log('');

  } catch (error) {
    log(`\n‚ùå Â§á‰ªΩÂ§±Ë¥•: ${error.message}`, 'red');
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };
